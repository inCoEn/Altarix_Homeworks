// –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ

// MARK: –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏

let optional: Int? = 7
let nonOptional: Int = optional!

// MARK: –ù–∞–π–¥–∏—Ç–µ –æ—à–∏–±–∫–∏

var name: String? = "Test"
//var age: Int = nil –Ω–µ–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å nil
let distance: Float = 26.7
var middleName: String? = nil

// MARK: –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ number —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏

let number: Int??? = 10

// 1
number!!!

// 2
if let number1 = number{
    if let number2 = number1{
        if let number3 = number2{
            print(number3)
        }
    }
}


// MARK: –ó–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ 15 –Ω–∞ 17 –≤ –º–∞—Å—Å–∏–≤–µ

 var numbers = [4, 8, 15, 16, 23, 42]
 numbers[2] = 17

// MARK: –ù–∞–π–¥–∏—Ç–µ –æ—à–∏–±–∫–∏

let array1 = [Int]()
//let array2 = [] –ù–µ –æ–±—ä—è–≤–ª–µ–Ω —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–∞
let array3: [String] = []

let array4 = [1, 2, 3]
print(array4[0])
//print(array4[5]) –í –º–∞—Å—Å–∏–≤–µ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º 5
array4[1...2]
//array4[0] = 4
//array4.append(4) –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∫ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–µ

var array5 = [1, 2, 3]
array5[0] = array5[1]
array5[0...1] = [4, 5]
//array5[0] = "Six" –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –∫ –º–∞—Å—Å–∏–≤—É —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
//array5 += 6
for item in array5 { print(item) }

//let dict1: [Int, Int] = [:] –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ª–æ–≤–∞—Ä–µ –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ [Int: Int]
//let dict2 = [:] –ù–µ —É–∫–∞–∑–∞–Ω —Ç–∏–ø
let dict3: [Int: Int] = [:]

let dict4 = ["One": 1, "Two": 2, "Three": 3]
//dict4[1] –ù–µ–ª—å–∑—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —ç–ª–µ–º–µ–Ω—Ç—É —Å–ª–æ–≤–∞—Ä—è –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –∫–ª—é—á–∞
dict4["One"]
//dict4["Zero"] = 0 –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
//dict4[0] = "Zero" —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å [String: Int]

var dict5 = ["NY": "New York", "CA": "California"]
dict5["NY"]
dict5["WA"] = "Washington"
dict5["CA"] = nil

// MARK: –ù–∞–π–¥–∏—Ç–µ –¥–µ—Ä–µ–≤–µ–Ω—Å–∫–∏—Ö, –Ω–æ –Ω–µ –¥–æ–º–∞—à–Ω–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–Ω–æ–∂–µ—Å—Ç–≤:

 let houseAnimals: Set = ["üê∂", "üê±"]
 let farmAnimals: Set = ["üêÆ", "üêî", "üêë", "üê∂", "üê±"]

 let onlyFarmAnimals = farmAnimals.subtracting(houseAnimals)

// MARK: –°–¥–µ–ª–∞–π—Ç–µ –∏–∑ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ä–µ–¥–Ω–∏–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π

 let appRatings = [
     "Calendar Pro": [1, 5, 5, 4, 2, 1, 5, 4],
     "The Messenger": [5, 4, 2, 5, 4, 1, 1, 2],
     "Socialise": [2, 1, 2, 2, 1, 2, 4, 2]
 ]

 let awgAppRatings = appRatings.mapValues({Float($0.reduce(0,+))/Float($0.count)})

// MARK: –ü–æ–ª—É—á–∏—Ç–µ —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –≤—ã—à–µ 3

var bestApp = awgAppRatings.filter { $0.value > 3 }

// MARK: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ "–ü—Ä–∏–≤–µ—Ç, " –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å

func helloPlusString(_ line: String) -> Void {
    print("–ü—Ä–∏–≤–µ—Ç,", line)
}

// MARK: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤ –≤–∏–¥–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å

func politeFunc(name: String, surname: String) -> Void {
    print("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, \(name) \(surname)")
}

// MARK: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–∏–ø–∞ int –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö —Å—É–º–º—É

func sumCalculation(_ numbers: Int...) -> Int {
    var result: Int = 0
    for number in numbers{
        result += number
    }
    return result
}

// MARK: –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–µ—á–∞—Ç–∞–µ—Ç —Å—Ç—Ä–æ–∫—É "–ü—Ä–∏–≤–µ—Ç" –∏ –ø—Ä–∏—Å–≤–æ–π—Ç–µ —ç—Ç–æ –∑–∞–º—ã–∫–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π. –í—ã–∑–æ–≤–∏—Ç–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ

let stringClosure = {print("–ü—Ä–∏–≤–µ—Ç")}
stringClosure()

// MARK: –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 2 —á–∏—Å–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö —Å—É–º–º—É. –ü—Ä–∏—Å–≤–æ–π—Ç–µ —ç—Ç–æ –∑–∞–º—ã–∫–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –≤—ã–∑–æ–≤–∏—Ç–µ –µ–≥–æ

var sumOfSomeFloats = {(_ firstValue: Float, _ secondValue: Float) in return (firstValue+secondValue)}
sumOfSomeFloats(5.6, 6.2)

// MARK: –û—Ç—Å–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –º–∞—Å—Å–∏–≤ [16, 8, 15, 42, 4, 23] –ø–æ —É–±—ã–≤–∞–Ω–∏—é

var sourceArray = [16, 8, 15, 42, 4, 23]
sourceArray.sort { $0 > $1 }

// MARK: –ò–∑ –º–∞—Å—Å–∏–≤–∞ [16, 8, 15, 42, 4, 23] —Å–¥–µ–ª–∞–π—Ç–µ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å —á–∏—Å–ª–∞–º–∏ –±–æ–ª—å—à–µ 10

var secondSourceArray = [16, 8, 15, 42, 4, 23]
var graterTenArray = secondSourceArray.filter { $0 > 10 }

// MARK: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–º—ã–∫–∞–Ω–∏–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –µ–≥–æ

func funcWithClosureParam(_ closure: (Int, Int) -> Int = {(_ x: Int, _ y: Int) in return (x+y)} ){
    closure(2, 5)
}

// MARK: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–º—ã–∫–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —á—Ç–æ-—Ç–æ –ø–µ—á–∞—Ç–∞–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å

func printWithClosure(_ text: String) {
    let output = {(_ text: String) in return print(text)}
    return output(text)
}

// MARK: –ù–∞–ø—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–≤—Ç–æ—Ä–∞—è–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ —Ä–∞–∑

func multiClosure(closure: (Double, Double) -> Double, quantity: Int){
    var count = quantity
    while count>0{
        print(closure(0.5, 5.0))
        count -= 1
    }
}

// MARK: –£–±–µ—Ä–∏—Ç–µ —É—Ç–µ—á–∫—É –ø–∞–º—è—Ç–∏

class Employee { weak var computer: Computer?}
class Computer { weak var employee: Employee?}
var employee: Employee? = Employee()
var computer: Computer? = Computer()
employee?.computer = computer
computer?.employee = employee

// MARK: –£–±–µ—Ä–∏—Ç–µ —É—Ç–µ—á–∫—É –ø–∞–º—è—Ç–∏

class Counter {
    var value = 0
    lazy var increase = {
        self.value += 1
    }
}

// MARK: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å true, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –≤ –ª—é–±–æ–º –∏–∑ –¥–≤—É—Ö –º–∞—Å—Å–∏–≤–æ–µ, –ª–∏–±–æ false –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ

let animals1 = ["dog", "cat", "bird", "pig"]
let animals2 = ["turtle", "snake", "lizard", "shark"]

func searchItem(text: String) -> Bool{
    if animals1.contains(text){
        return true
    }
    else if animals2.contains(text){
        return true
    }
    else{
        return false
    }
}

// MARK: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç–∞–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª

func factorial(_ n: Int) -> Int{
    if n == 0{
        return 1
    }
    return n * factorial(n-1)
}

//MARK: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –º–∞—Å—Å–∏–≤–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Ü–∏—Ñ—Ä–∞ 2

func count2(_ arr: Array<Int>) -> Int{
    var count: Int = 0
    for item in arr{
        if item == 2{
            count += 1
        }
    }
    return count
}

// MARK: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –ø–µ—Ä–≤—ã—Ö 3 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ —Ü–∏—Ñ—Ä–∞ 2

func first3(_ arr: Array<Int>) -> Bool{
    if arr[1...3].contains(2){
        return true
    }
    else{
        return false
    }
}

// MARK: –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑, –∫–æ—Ç–æ—Ä–æ–µ –¥–≤–µ —Ü–∏—Ñ—Ä—ã 5 –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ä—è–¥–æ–º –≤ –º–∞—Å—Å–∏–≤–µ

func doubleFive(_ arr: Array<Int>) -> Int{
    var total: Int = 0
    for i in 0 ..< arr.count{
        if arr[i] == 5 && arr[i+1] == 5{
            total += 1
        }
    }
    return total
}
